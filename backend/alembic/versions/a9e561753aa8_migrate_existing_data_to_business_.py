"""migrate_existing_data_to_business_numbering

Revision ID: a9e561753aa8
Revises: 373661f14929
Create Date: 2025-10-01 09:26:07.079988

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = 'a9e561753aa8'
down_revision = '373661f14929'
branch_labels = None
depends_on = None

Base = declarative_base()

class Sale(Base):
    __tablename__ = 'sales'
    id = sa.Column(sa.Integer, primary_key=True)
    business_id = sa.Column(sa.Integer)
    business_sale_number = sa.Column(sa.Integer)
    created_at = sa.Column(sa.DateTime)

class Product(Base):
    __tablename__ = 'products'  
    id = sa.Column(sa.Integer, primary_key=True)
    business_id = sa.Column(sa.Integer)
    business_product_number = sa.Column(sa.Integer)
    created_at = sa.Column(sa.DateTime)

class Expense(Base):
    __tablename__ = 'expenses'
    id = sa.Column(sa.Integer, primary_key=True)
    business_id = sa.Column(sa.Integer)
    business_expense_number = sa.Column(sa.Integer)
    date = sa.Column(sa.DateTime)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    
    try:
        print("Starting data migration for business-scoped numbering...")
        
        # 1. Migrate Sales
        print("Migrating sales...")
        sales_businesses = session.query(Sale.business_id).distinct().all()
        for (business_id,) in sales_businesses:
            sales_to_migrate = session.query(Sale).filter(
                Sale.business_id == business_id,
                Sale.business_sale_number.is_(None)
            ).order_by(Sale.created_at).all()
            
            print(f"  Business {business_id}: {len(sales_to_migrate)} sales to migrate")
            
            for idx, sale in enumerate(sales_to_migrate, 1):
                sale.business_sale_number = idx
                
            session.commit()
            print(f"  ‚úÖ Business {business_id}: Migrated {len(sales_to_migrate)} sales")

        # 2. Migrate Products
        print("Migrating products...")
        product_businesses = session.query(Product.business_id).distinct().all()
        for (business_id,) in product_businesses:
            products_to_migrate = session.query(Product).filter(
                Product.business_id == business_id,
                Product.business_product_number.is_(None)
            ).order_by(Product.created_at).all()
            
            print(f"  Business {business_id}: {len(products_to_migrate)} products to migrate")
            
            for idx, product in enumerate(products_to_migrate, 1):
                product.business_product_number = idx
                
            session.commit()
            print(f"  ‚úÖ Business {business_id}: Migrated {len(products_to_migrate)} products")

        # 3. Migrate Expenses
        print("Migrating expenses...")
        expense_businesses = session.query(Expense.business_id).distinct().all()
        for (business_id,) in expense_businesses:
            expenses_to_migrate = session.query(Expense).filter(
                Expense.business_id == business_id,
                Expense.business_expense_number.is_(None)
            ).order_by(Expense.date).all()
            
            print(f"  Business {business_id}: {len(expenses_to_migrate)} expenses to migrate")
            
            for idx, expense in enumerate(expenses_to_migrate, 1):
                expense.business_expense_number = idx
                
            session.commit()
            print(f"  ‚úÖ Business {business_id}: Migrated {len(expenses_to_migrate)} expenses")

        print("üéâ Data migration completed successfully!")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå Migration failed: {e}")
        raise
    finally:
        session.close()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # For data migration, downgrade would set all business numbers to NULL
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    
    try:
        print("Reverting business numbering data migration...")
        
        # Reset sales
        session.query(Sale).update({"business_sale_number": None})
        print("‚úÖ Reset sales business numbers")
        
        # Reset products  
        session.query(Product).update({"business_product_number": None})
        print("‚úÖ Reset products business numbers")
        
        # Reset expenses
        session.query(Expense).update({"business_expense_number": None})
        print("‚úÖ Reset expenses business numbers")
        
        session.commit()
        print("üéâ Data migration reverted successfully!")
        
    except Exception as e:
        session.rollback()
        print(f"‚ùå Revert failed: {e}")
        raise
    finally:
        session.close()
    # ### end Alembic commands ###
