"""fix_existing_product_currency_data

Revision ID: 108b7c6c175e
Revises: ec3a4dac596d
Create Date: 2025-01-14 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = '108b7c6c175e'
down_revision = 'ec3a4dac596d'
branch_labels = None
depends_on = None

# This is our Product model definition, needed for the data migration.
# It must match your actual table structure.
class Product(sa.Table):
    __tablename__ = 'products'
    id = sa.Column(sa.Integer, primary_key=True)
    price = sa.Column(sa.Float) # Price in USD (existing field)
    cost_price = sa.Column(sa.Float, nullable=True)
    # Historical context fields
    original_price = sa.Column(sa.Float, nullable=True)
    original_cost_price = sa.Column(sa.Float, nullable=True)
    original_currency_code = sa.Column(sa.String(3), nullable=True)
    exchange_rate_at_creation = sa.Column(sa.Float, nullable=True)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # This migration is purely a data fix, no schema changes are needed.
    bind = op.get_bind()
    session = Session(bind=bind)

    print("Starting data migration: Fixing existing product currency data...")

    # Get all products that have historical context but potentially wrong USD prices
    products_to_fix = session.query(Product).filter(
        Product.original_price.isnot(None),
        Product.original_currency_code.isnot(None),
        Product.exchange_rate_at_creation.isnot(None)
    ).all()

    print(f"Found {len(products_to_fix)} products with historical context to potentially fix.")

    fixed_count = 0
    for product in products_to_fix:
        # Skip if the rate is 0 to avoid division by zero
        if product.exchange_rate_at_creation == 0:
            print(f"Skipping product ID {product.id}: Exchange rate is 0.")
            continue

        # THE CORE FIX: Recalculate the USD price correctly.
        # USD Price = Original Local Price / Historical Exchange Rate
        correct_usd_price = product.original_price / product.exchange_rate_at_creation

        # Check if the current USD price is wrong (differs significantly from the correct calculation)
        # We use a tolerance to avoid floating-point precision issues
        tolerance = 0.01
        current_price = product.price or 0
        if abs(current_price - correct_usd_price) > tolerance:
            print(f"Fixing product ID {product.id}:")
            print(f"  Local Price: {product.original_price} {product.original_currency_code}")
            print(f"  Historical Rate: {product.exchange_rate_at_creation}")
            print(f"  Old USD Price: {current_price}")
            print(f"  New USD Price: {correct_usd_price}")

            # Update the product with the correct USD price
            product.price = correct_usd_price

            # Also fix the cost price if historical context exists
            if product.original_cost_price is not None:
                correct_usd_cost_price = product.original_cost_price / product.exchange_rate_at_creation
                current_cost_price = product.cost_price or 0
                if abs(current_cost_price - correct_usd_cost_price) > tolerance:
                    print(f"  Old USD Cost: {current_cost_price}")
                    print(f"  New USD Cost: {correct_usd_cost_price}")
                    product.cost_price = correct_usd_cost_price

            fixed_count += 1
        # else:
        #   print(f"Product ID {product.id} USD price is already correct.")

    session.commit()
    print(f"Data migration completed. Fixed {fixed_count} products.")
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # WARNING: There is no safe automatic way to revert this data fix.
    # The downgrade is a no-op. Once prices are recalculated, reverting
    # would require a backup of the original values, which we don't have.
    print("WARNING: Downgrade is not supported for this data migration.")
    print("The operation recalculated USD prices from historical data.")
    print("Reverting would require restoring from a backup.")
    # ### end Alembic commands ###
