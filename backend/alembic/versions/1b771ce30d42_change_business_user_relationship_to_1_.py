"""change_business_user_relationship_to_1_many

Revision ID: 1b771ce30d42
Revises: 5d840f2542e5
Create Date: 2025-09-03 08:18:12.749765

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1b771ce30d42'
down_revision = '5d840f2542e5'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # STEP 1: Add the new column first, allowing NULL values
    op.add_column('users', sa.Column('business_id', sa.Integer(), nullable=True))
    
    # STEP 2: DATA MIGRATION: Populate the new users.business_id column using the old businesses.user_id link
    # This connection is needed for the data migration step
    connection = op.get_bind()
    
    # For each business, find its user (from the old user_id) and set that user's business_id to the business's id.
    result = connection.execute(sa.text("SELECT id, user_id FROM businesses"))
    for business in result:
        business_id, user_id = business
        if user_id: # Only update if the business had a user assigned
            connection.execute(
                sa.text("UPDATE users SET business_id = :biz_id WHERE id = :user_id"),
                {"biz_id": business_id, "user_id": user_id}
            )
    
    # STEP 3: Now that the data is safe in the new column, we can drop the old constraints and column
    op.drop_constraint(op.f('fk_businesses_user_id_users'), 'businesses', type_='foreignkey')
    op.drop_column('businesses', 'user_id')
    
    # STEP 4: Now we can set the new column to be NOT NULL, since we've migrated all the data
    # First, handle any potential NULL values for users that weren't linked to a business (shouldn't happen, but safe)
    connection.execute(sa.text("UPDATE users SET business_id = 1 WHERE business_id IS NULL"))
    # Now alter the column to be NOT NULL
    op.alter_column('users', 'business_id', nullable=False)
    
    # STEP 5: Finally, create the new foreign key constraint
    op.create_foreign_key(op.f('fk_users_business_id_businesses'), 'users', 'businesses', ['business_id'], ['id'])
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_users_business_id_businesses'), 'users', type_='foreignkey')
    op.drop_column('users', 'business_id')
    op.add_column('businesses', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('fk_businesses_user_id_users'), 'businesses', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###
